const fs = require('fs')
const path = require('path')

const puppeteer = require('puppeteer')

const DOCUMENT_URL = {
  classes: 'https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes',
  elements: 'https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements',
}
const CODES_SELECTOR = {
  classes: '#alphabetical_index+div>ul>li>a>code',
  elements: '#index+div>ul>li>a>code',
}

/**
 * @typedef {import("puppeteer").Browser} Browser
 */

/**
 * @param {Browser} browser
 * @returns {Promise<string[]>}
 */
const getPseudos = async (browser, url, selector) => {
  const page = await browser.newPage()
  await page.goto(url)
  const codeElements = await page.$$(selector)
  const codes = await Promise.all(
    codeElements.map((element) =>
      element.evaluate((node) =>
        node.innerText.split(/\s/)[0].replace(/^:+/, '')
      )
    )
  )

  return codes.filter((code) => code.indexOf('(') === -1)
}

;(async () => {
  const browser = await puppeteer.launch()
  const [classes, elements] = await Promise.all([
    getPseudos(browser, DOCUMENT_URL.classes, CODES_SELECTOR.classes),
    getPseudos(browser, DOCUMENT_URL.elements, CODES_SELECTOR.elements),
  ])
  await browser.close()

  const output = `/* DON'T EDIT THIS FILE. This is generated by 'scripts/update-pseudos.js' */
module.exports = {
  pseudoElements: [
${elements.map((e) => `    '${e}'`).join(',\n')},
  ],

  pseudoClasses: [
${classes.map((c) => `    '${c}'`).join(',\n')},
  ],
}
`

  fs.writeFileSync(path.resolve(__dirname, '../lib.js'), output, 'utf-8')
})()
